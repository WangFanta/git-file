负载测试，通过测试系统在资源超负荷情况下的表现，将使测试对象承担不同的工作量，以评测和评估测试对象在不同工作量
	条件下的性能行为，以及持续正常运行的能力
压力测试，是模拟实际应用的软硬件环境及用户使用过程的系统负荷，长时间或超大负荷地运行测试软件，来测试被测系统的
	性能、可靠性、稳定性
吞吐量，单位时间内系统处理客户端的请求数。
可以发现随着吞吐量的降低，响应时间也降低，同样的，吞吐量的峰值和最大响 应时间差不多在同时出现
thinktime，思考时间是真实用户在action之间等待的时间。例如：当一个用户从服务器接收到数据时，用户可能需要在响
	应之前等待几分钟回顾数据，这种推迟被称为思考时间
集合点，设置多个用户到达某个用户数量点集合

#mock  #模拟mock封装 mock模拟的是一个方法
from mock import mock
def mock_test(mock_method,request_data,url,method,response_data):
    #mock_method是一个 send_get或者post的方法,所以下面必须把模拟的值传给他
    mock_method = mock.Mock(return_value=response_data)
    res = mock_method(url,method,request_data)
    return res
    
# requests 方法，下面的函数可以替换成post或者get
import requests
def send_post(self,url,data):
    res = requests.post(url=url,data=data).json()
    return res

r = requests.post("http://m.ctrip.com/post")
payload = {'some': 'data'}
r = requests.post(url, data=json.dumps(payload))                         #如果传递的payload是string而不是dict，需要先调用dumps方法格式化一下
print r.content #以字节的方式去显示，中文显示为字符
print r.text #以文本的方式去显示
print r.json() #获取json,需要先import json
print r.cookies #获取cookies
  
#jsonpath_rw 对json操作的一个模块
from jsonpath_rw import jsonpath,parse#获取特定的值
>>>json_obj = {"student":[{"male":176,"female":162},{"male":174,"female":159}]}
>>>jsonpath_expr = parse("student[*].male")                              #放入查找的范围
>>>male = jsonpath_expr.find(json_obj)                                   #只要包含我们要查找的东西就找出来
>>>[match.value for match in male]

#对excel进行操作
import xlrd     #两个不同的工具
from xlutils.copy import copy#写入数据需要用copy
class OperationExcel:
	def __init__(self,file_name=None,sheet_id=None):
        if file_name:
			self.file_name = file_name
			self.sheet_id = sheet_id	
		else:
			self.file_name = '../dataconfig/case1.xls'
			self.sheet_id = 0
		self.data = self.get_data()
	#获取sheets的内容
	def get_data(self):
		data = xlrd.open_workbook(self.file_name)
		tables = data.sheets()[self.sheet_id]
		return tables
	#获取单元格的行数
	def get_lines(self):
		tables = self.data
		return tables.nrows
	#获取某一个单元格的内容
	def get_cell_value(self,row,col):
		return self.data.cell_value(row,col)
	#写入数据
	def write_value(self,row,col,value):
		'''
		写入excel数据
		row,col,value
		'''
		read_data = xlrd.open_workbook(self.file_name)
		write_data = copy(read_data)                                       #需要先进行copy
		sheet_data = write_data.get_sheet(0)
		sheet_data.write(row,col,value)
		write_data.save(self.file_name)
	#根据对应的caseid 找到对应行的内容
	def get_rows_data(self,case_id):
		row_num = self.get_row_num(case_id)
		rows_data = self.get_row_values(row_num)                           #row_values(id),col_values(id) 就可以获取到内容
		return rows_data
	#根据对应的caseid找到对应的行号
	def get_row_num(self,case_id):
		num = 0
		clols_data = self.get_cols_data()
		for col_data in clols_data:
			if case_id in col_data:
				return num
			num = num+1
	#根据行号，找到该行的内容
	def get_row_values(self,row):
		tables = self.data
		row_data = tables.row_values(row)
		return row_data
	#获取某一列的内容
	def get_cols_data(self,col_id=None):
		if col_id != None:
			cols = self.data.col_values(col_id)
		else:
			cols = self.data.col_values(0)
		return cols
        
#发送邮件
import smtplib  #加载smtplib模块
from email.mime.text import MIMEText
from email.utils import formataddr
my_sender='发件人邮箱账号'
my_user='收件人邮箱账号'
def mail():
    ret=True
    try:
        msg=MIMEText('填写邮件内容','plain','utf-8')
        msg['From']=formataddr(["发件人邮箱昵称",my_sender])   #括号里的对应发件人邮箱昵称、发件人邮箱账号
        msg['To']=formataddr(["收件人邮箱昵称",my_user])   #括号里的对应收件人邮箱昵称、收件人邮箱账号
        msg['Subject']="主题" #邮件的主题，也可以说是标题

        server=smtplib.SMTP("smtp.xxx.com",25)  #发件人邮箱中的SMTP服务器，端口是25
        server.login(my_sender,"发件人邮箱密码")    #括号中对应的是发件人邮箱账号、邮箱密码
        server.sendmail(my_sender,[my_user,],msg.as_string())   #括号中对应的是发件人邮箱账号、收件人邮箱账号、发送邮件
        server.quit()   #这句是关闭连接的意思
    except Exception:   #如果try中的语句没有执行，则会执行下面的ret=False
        ret=False
    return ret
ret=mail()
